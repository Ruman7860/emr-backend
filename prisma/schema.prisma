// schema.prisma (MongoDB, ready-to-use)

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// ========================
// Core Models
// ========================

model Patient {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  firstName   String
  lastName    String
  dateOfBirth DateTime
  gender      String
  address     String?
  phone       String?
  status      PatientStatus @default(ACTIVE)

  registeredById  String  @db.ObjectId
  registrationFee Float
  doctorId        String? @db.ObjectId
  referredTo      String?

  noOfVisits Int @default(0)

  visits     Visit[]
  operations Operation[]
  billing    Billing[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Visit {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  patientId String   @db.ObjectId
  doctorId  String   @db.ObjectId
  staffId   String   @db.ObjectId
  visitDate DateTime @default(now())
  notes     String?

  consultationFee Float? // Optional â€” only charged if outside 14 days window
  feeValidUntil   DateTime? // When consultation fee validity expires

  prescriptions Prescription[]
  Patient       Patient        @relation(fields: [patientId], references: [id])
}

model Prescription {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  visitId      String  @db.ObjectId
  drugName     String
  dosage       String
  duration     String?
  instructions String?
  Visit        Visit   @relation(fields: [visitId], references: [id])
}

model Operation {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  patientId String   @db.ObjectId
  name      String
  date      DateTime
  surgeonId String   @db.ObjectId
  outcome   String?
  fee       Float
  Patient   Patient  @relation(fields: [patientId], references: [id])
}

model Billing {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  patientId   String        @db.ObjectId
  date        DateTime      @default(now())
  type        BillingType
  amount      Float
  status      PaymentStatus
  paymentMode String?
  Patient     Patient       @relation(fields: [patientId], references: [id])
}

model Doctor {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  userId    String  @unique @db.ObjectId // link to User
  specialty String?
  phone     String?

  user User @relation(fields: [userId], references: [id])
}

model Staff {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  userId String  @unique @db.ObjectId // link to User
  phone  String?

  user User @relation(fields: [userId], references: [id])
}

// ========================
// Supporting Models
// ========================

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  password  String
  role      Role     @default(STAFF)
  name      String?
  createdAt DateTime @default(now())
  Doctor    Doctor?
  Staff     Staff?
}

model Inventory {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  itemName  String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ========================
// Enums
// ========================

enum PatientStatus {
  ACTIVE
  INACTIVE
}

enum BillingType {
  REGISTRATION
  CONSULTATION
  OPERATION
  LAB
}

enum PaymentStatus {
  PAID
  UNPAID
}

enum Role {
  ADMIN
  DOCTOR
  STAFF
}
